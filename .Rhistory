axis.text = element_text(size = 15),axis.title = element_text(size =20))+
scale_color_manual(values=c( '#20a162',"#ee3f4d", "#2983bb"))
View(rt)
library(survivalROC)
rt=phe_1
survivalROC_helper <- function(t) {
survivalROC(Stime=rt$time, status=rt$event,
marker = rt$riskscore ,
predict.time =t, method="KM")
}
rt$time=rt$time/12
survivalROC_helper <- function(t) {
survivalROC(Stime=rt$time, status=rt$event,
marker = rt$riskscore ,
predict.time =t, method="KM")
}
survivalROC_data <- data_frame(t = c(1,3,5)) %>%
mutate(survivalROC = map(t, survivalROC_helper),
auc = map_dbl(survivalROC, magrittr::extract2, "AUC"),
df_survivalROC = map(survivalROC, function(obj) {
as_data_frame(obj[c("cut.values","TP","FP")])
})) %>%
dplyr::select(-survivalROC) %>%
unnest(cols = c(df_survivalROC)) %>%
arrange(t, FP, TP)
survivalROC_data1 <- survivalROC_data %>%
mutate(auc =sprintf("%.3f",auc))%>%
unite(year, t,auc,sep = " year AUC: ")
AUC =factor(survivalROC_data1$year)
survivalROC_data1 %>%
ggplot(mapping = aes(x = FP, y = TP)) +
geom_path(aes(color=AUC),size = 1,linejoin = 'round')+
geom_abline(intercept = 0, slope = 1, linetype = "dashed")+
theme_bw() +xlab('False positive rate')+ylab('True positive rate')+
theme(legend.position = c(0.75,0.2),legend.text = element_text(size =14),
axis.text = element_text(size = 15),axis.title = element_text(size =20))+
scale_color_manual(values=c( '#20a162',"#ee3f4d", "#2983bb"))
##################################################GEO
rm(list = ls())
#GEO
rm(list = ls())
options(stringsAsFactors = F)
library(survival)
library(survminer)
library(plyr)
library(dplyr)
library(stringr)
library(forestplot)
library(lars)
library(glmnet)
library(rms)
library(survivalROC)
library(VIM)
library(tidyverse)
library(ggtext)
library(ggsci)
library(ggcorrplot)
library(corrgram)
library(hrbrthemes)
library(wesanderson)
library(limma)
#GEO
rm(list = ls())
options(stringsAsFactors = F)
library(survival)
library(survminer)
library(plyr)
library(dplyr)
library(stringr)
library(rms)
library(survivalROC)
library(VIM)
library(tidyverse)
GEO_counts=read.csv('GEO_counts_log2_tpm_normalize.csv',row.names = 1,check.names = FALSE)
geo_clinical=read.csv('GEO_clinical.csv',row.names = 1)
GEO_counts=GEO_counts[,colnames(GEO_counts) %in% rownames(geo_clinical)]#获得84个GEO样本
counts=GEO_counts %>% t() %>% as.data.frame()
counts$names=rownames(counts)
geo_clinical$names=rownames(geo_clinical)
phe_1=merge(counts,geo_clinical,by='names',all = FALSE)
phe_1$riskscore=phe_1$KLHDC7B*-0.3619641+phe_1$CHGA * 0.1964393
phe_1=phe_1 %>% dplyr::select(KLHDC7B,CHGA,riskscore,time,event)
Surphe_1=phe_1
Surphe_1$riskscore_group=ifelse(Surphe_1$riskscore>quantile(Surphe_1$riskscore,0.5),'high','low')
sfit <- survfit(Surv(time, event)~riskscore_group, data=Surphe_1)
ggsurvplot(sfit,palette = c("#ee3f4d","#2983bb"),
risk.table =TRUE,pval =TRUE,
conf.int =TRUE,xlab ="Time in months",
ggtheme =theme_light(),
ncensor.plot = TRUE)
dat =Surphe_1
s=Surv(time, event) ~ riskscore
model <- coxph(s, data = dat )
RiskScore<-predict(model,type = "risk")
names(RiskScore) = rownames(dat)
fp <- RiskScore
phe<-dat
fp_dat=data.frame(patientid=1:length(fp),fp=as.numeric(sort(fp)))
fp_dat$riskgroup= ifelse(fp_dat$fp>=median(fp_dat$fp),'high','low')
sur_dat=data.frame(patientid=1:length(fp),time=phe[names(sort(fp)),'time'],event=phe[names(sort(fp )),'event'])
sur_dat$event=ifelse(sur_dat$event==0,'alive','death')
sur_dat$event=factor(sur_dat$event,levels = c("death","alive"))
exp_dat=dat[names(sort(fp)),c('KLHDC7B','CHGA')]
exp_dat$KLHDC7B=scale(exp_dat$KLHDC7B)
exp_dat$CHGA=scale(exp_dat$CHGA)
p1=ggplot(fp_dat,aes(x=patientid,y=fp))+geom_point(aes(color=riskgroup))+
scale_colour_manual(values = c("#ee3f4d","#2983bb"))+
scale_x_discrete(expand = c(0, 0)) +
theme_bw()+labs(x=NULL,y="Risk score")+
geom_hline(yintercept=median(fp_dat$fp),colour="black", linetype="dotted",size=0.8)+
geom_vline(xintercept=sum(fp_dat$riskgroup=="low"),colour="black", linetype="dotted",size=0.8)+
theme(axis.text.y = element_text(size = 13),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14),
axis.title.y = element_text(size = 13))
p2=ggplot(sur_dat,aes(x=patientid,y=time))+geom_point(aes(col=event))+theme_bw()+
scale_colour_manual(values = c("#ee3f4d","#2983bb"))+
scale_x_discrete(expand = c(0, 0)) +
labs(x=NULL,y="Survival time(month)")+
geom_vline(xintercept=sum(fp_dat$riskgroup=="low"),colour="black", linetype="dotted",size=0.8)+
theme(axis.text.y = element_text(size = 13),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14),
axis.title.y = element_text(size = 13))
library(ggplot2)
require(reshape2)
require(scales)
tmp=t(scale(exp_dat))
nba=tmp
colnames(nba)=1:length(fp)
nba.m <- melt(nba)
colnames(nba.m)=c( "Var1"  ,  "patientid"   ,  "rescale")
nba.m1=nba.m[nba.m$Var1=='CHGA',]
mycolors <- colorRampPalette(c("white", "green", "red"), bias = 1.2)(100)
p3 <- ggplot(nba.m, aes(x=patientid, y=Var1)) + geom_tile(aes(fill = rescale)) +
scale_colour_manual(values = mycolors)+
theme_bw()+
theme(axis.text.y=element_text(size =13),legend.text = element_text(size = 13),legend.title = element_text(size = 13))+
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x=NULL,y=NULL)+
scale_fill_gradient2(low ='#1772b4' , high = '#c04851',mid='white')
library(aplot)
plots=p1 %>% insert_top(p2) %>% insert_top(p3)
plots
library(survivalROC)
rt=phe_1
rt$time=rt$time/12
survivalROC_helper <- function(t) {
survivalROC(Stime=rt$time, status=rt$event,
marker = rt$riskscore ,
predict.time =t, method="KM")
}
survivalROC_data <- data_frame(t = c(1,3,5)) %>%
mutate(survivalROC = map(t, survivalROC_helper),
auc = map_dbl(survivalROC, magrittr::extract2, "AUC"),
df_survivalROC = map(survivalROC, function(obj) {
as_data_frame(obj[c("cut.values","TP","FP")])
})) %>%
dplyr::select(-survivalROC) %>%
unnest(cols = c(df_survivalROC)) %>%
arrange(t, FP, TP)
survivalROC_data1 <- survivalROC_data %>%
mutate(auc =sprintf("%.3f",auc))%>%
unite(year, t,auc,sep = " year AUC: ")
AUC =factor(survivalROC_data1$year)
survivalROC_data1 %>%
ggplot(mapping = aes(x = FP, y = TP)) +
geom_path(aes(color=AUC),size = 1,linejoin = 'round')+
geom_abline(intercept = 0, slope = 1, linetype = "dashed")+
theme_bw() +xlab('False positive rate')+ylab('True positive rate')+
theme(legend.position = c(0.75,0.2),legend.text = element_text(size =14),
axis.text = element_text(size = 15),axis.title = element_text(size =20))+
scale_color_manual(values=c( '#20a162',"#ee3f4d", "#2983bb"))
#GEO
rm(list = ls())
###maf
rm(list = ls())
library(maftools)
####DEGs
rm(list=ls())
stringsAsFactors = FALSE
library(DESeq2)
library(ggplot2)
###ggplot2
deseq_res <- read.delim('DESeq2.txt', sep = '\t')
#例如这里根据 |log2FC| >= 1 & FDR p-value < 0.05 定义“差异”
deseq_res[which(deseq_res$log2FoldChange >= 1 & deseq_res$padj < 0.05),'sig'] <- 'log2FC >= 1'
deseq_res[which(deseq_res$log2FoldChange <= -1 & deseq_res$padj < 0.05),'sig'] <- 'log2FC <= -1'
deseq_res[which(abs(deseq_res$log2FoldChange) < 1 & deseq_res$padj < 0.05),'sig'] <- 'p-value < 0.05'
deseq_res[which(abs(deseq_res$padj) >= 0.05),'sig'] <- 'no difference'
deseq_res[which(deseq_res$padj %in% NA),'sig'] <- 'no difference'
#纵轴为显著性 p 值
volcano_p <- ggplot(deseq_res, aes(log2FoldChange, -log(padj, 10))) +
geom_point(aes(color = sig), alpha = 0.6, size = 1.5) +
scale_color_manual(values = c("#2983bb","#ee3f4d" ,'gray30' ,'#1ba784')) +
theme(panel.grid = element_blank(), panel.background = element_rect(color = 'black', fill = 'transparent'), legend.position = c(0.26, 0.92)) +
theme(legend.title = element_blank(),legend.text = element_text(size = 14), legend.key = element_rect(fill = 'transparent'), legend.background = element_rect(fill = 'transparent')) +
theme(axis.text = element_text(size = 12),axis.title = element_text(size=14))+
geom_vline(xintercept = c(-1, 1), color = 'gray', size = 0.25) +
geom_hline(yintercept = -log(0.05, 10), color = 'gray', size = 0.25) +
labs(x = 'log2 Fold Change', y = '-log10 p-value', color = NA,size=10) +
xlim(-5, 5)
volcano_p
#纵轴为显著性 p 值
volcano_p <- ggplot(deseq_res, aes(log2FoldChange, -log(padj, 10))) +
geom_point(aes(color = sig), alpha = 0.6, size = 1.5) +
scale_color_manual(values = c("#2983bb","#ee3f4d" ,'gray30' ,'#1ba784')) +
theme(panel.grid = element_blank(), panel.background = element_rect(color = 'black', fill = 'transparent'), legend.position = c(0.26, 0.92)) +
theme(legend.title = element_blank(),legend.text = element_text(size = 14), legend.key = element_rect(fill = 'transparent'), legend.background = element_rect(fill = 'transparent')) +
theme(axis.text = element_text(size = 12),axis.title = element_text(size=18))+
geom_vline(xintercept = c(-1, 1), color = 'gray', size = 0.25) +
geom_hline(yintercept = -log(0.05, 10), color = 'gray', size = 0.25) +
labs(x = 'log2 Fold Change', y = '-log10 p-value', color = NA,size=15) +
xlim(-5, 5)
volcano_p
#纵轴为显著性 p 值
volcano_p <- ggplot(deseq_res, aes(log2FoldChange, -log(padj, 10))) +
geom_point(aes(color = sig), alpha = 0.6, size = 1.5) +
scale_color_manual(values = c("#2983bb","#ee3f4d" ,'gray30' ,'#1ba784')) +
theme(panel.grid = element_blank(), panel.background = element_rect(color = 'black', fill = 'transparent'), legend.position = c(0.26, 0.92)) +
theme(legend.title = element_blank(),legend.text = element_text(size = 20), legend.key = element_rect(fill = 'transparent'), legend.background = element_rect(fill = 'transparent')) +
theme(axis.text = element_text(size = 16),axis.title = element_text(size=20))+
geom_vline(xintercept = c(-1, 1), color = 'gray', size = 0.25) +
geom_hline(yintercept = -log(0.05, 10), color = 'gray', size = 0.25) +
labs(x = 'log2 Fold Change', y = '-log10 p-value', color = NA,size=15) +
xlim(-5, 5)
volcano_p
#纵轴为显著性 p 值
volcano_p <- ggplot(deseq_res, aes(log2FoldChange, -log(padj, 10))) +
geom_point(aes(color = sig), alpha = 0.6, size = 1.5) +
scale_color_manual(values = c("#2983bb","#ee3f4d" ,'gray30' ,'#1ba784')) +
theme(panel.grid = element_blank(), panel.background = element_rect(color = 'black', fill = 'transparent'), legend.position = c(0.26, 0.92)) +
theme(legend.title = element_blank(),legend.text = element_text(size = 18), legend.key = element_rect(fill = 'transparent'), legend.background = element_rect(fill = 'transparent')) +
theme(axis.text = element_text(size = 16),axis.title = element_text(size=20))+
geom_vline(xintercept = c(-1, 1), color = 'gray', size = 0.25) +
geom_hline(yintercept = -log(0.05, 10), color = 'gray', size = 0.25) +
labs(x = 'log2 Fold Change', y = '-log10 p-value', color = NA,size=15) +
xlim(-5, 5)
volcano_p
#纵轴为显著性 p 值
volcano_p <- ggplot(deseq_res, aes(log2FoldChange, -log(padj, 10))) +
geom_point(aes(color = sig), alpha = 0.6, size = 1.5) +
scale_color_manual(values = c("#2983bb","#ee3f4d" ,'gray30' ,'#1ba784')) +
theme(panel.grid = element_blank(), panel.background = element_rect(color = 'black', fill = 'transparent'), legend.position = c(0.26, 0.92)) +
theme(legend.title = element_blank(),legend.text = element_text(size = 17), legend.key = element_rect(fill = 'transparent'), legend.background = element_rect(fill = 'transparent')) +
theme(axis.text = element_text(size = 16),axis.title = element_text(size=20))+
geom_vline(xintercept = c(-1, 1), color = 'gray', size = 0.25) +
geom_hline(yintercept = -log(0.05, 10), color = 'gray', size = 0.25) +
labs(x = 'log2 Fold Change', y = '-log10 p-value', color = NA,size=15) +
xlim(-5, 5)
volcano_p
#纵轴为显著性 p 值
volcano_p <- ggplot(deseq_res, aes(log2FoldChange, -log(padj, 10))) +
geom_point(aes(color = sig), alpha = 0.6, size = 1.5) +
scale_color_manual(values = c("#2983bb","#ee3f4d" ,'gray30' ,'#1ba784')) +
theme(panel.grid = element_blank(), panel.background = element_rect(color = 'black', fill = 'transparent'), legend.position = c(0.26, 0.92)) +
theme(legend.title = element_blank(),legend.text = element_text(size = 16), legend.key = element_rect(fill = 'transparent'), legend.background = element_rect(fill = 'transparent')) +
theme(axis.text = element_text(size = 16),axis.title = element_text(size=20))+
geom_vline(xintercept = c(-1, 1), color = 'gray', size = 0.25) +
geom_hline(yintercept = -log(0.05, 10), color = 'gray', size = 0.25) +
labs(x = 'log2 Fold Change', y = '-log10 p-value', color = NA,size=15) +
xlim(-5, 5)
volcano_p
####cox
rm(list = ls())
options(stringsAsFactors = F)
library(survival)
library(survminer)
library(plyr)
library(dplyr)
library(stringr)
library(forestplot)
library(lars)
library(glmnet)
library(rms)
library(survivalROC)
library(VIM)
library(tidyverse)
library(ggtext)
library(ggsci)
library(ggcorrplot)
library(corrgram)
library(hrbrthemes)
library(wesanderson)
library(limma)
#获取表达矩阵
counts=read.csv('counts_tpm.csv',row.names = 1,check.names = FALSE)
clinical=read.csv('TCGA-SKCM-clinical.csv',row.names = 2)
targetgene_1=read.csv('GSEA_result_gene.csv',header = TRUE)
targetgene_1=targetgene_1$x
targetgene_2=read.csv('WGCNA_GENE.csv')
targetgene_2=targetgene_2$x
targetgene=c(targetgene_1,targetgene_2)
targetgene=unique(targetgene)
exprSet=counts[rownames(counts) %in% targetgene,]
exprSet=t(exprSet) %>% na.omit() %>% as.data.frame()
exprSet$sample=substr(rownames(exprSet),1,12)
eliminate_duplicated_lines=function(x){
counts_df=x
counts_df$median=apply(counts_df[,-ncol(counts_df)],1,median)
counts_df=counts_df[order(counts_df$sample,counts_df$median,decreasing = T),]
counts_df=counts_df[!duplicated(counts_df$sample),]
counts_df=counts_df[,-c(ncol(counts_df))]
x=counts_df
}
exprSet=eliminate_duplicated_lines(exprSet)
rownames(exprSet)=exprSet$sample
exprSet=exprSet[,-ncol(exprSet)]
clinical=clinical[row.names(clinical) %in% rownames(exprSet),]#得到相关样本的临床信息
clinical$days_to_last_follow_up
clinical$days_to_death[is.na(clinical$days_to_death)]=0
clinical$days_to_last_follow_up[is.na(clinical$days_to_last_follow_up)]=0
clinical$days=as.numeric(clinical$days_to_death)+as.numeric(clinical$days_to_last_follow_up)
clinical=clinical %>%
dplyr::select(c(vital_status,race,age_at_index,gender,tumor_stage,days,ajcc_pathologic_t,ajcc_pathologic_n,ajcc_pathologic_m))
colnames(clinical)=c('event','race','age','gender','stage',"days",'T','N','M')
clinical$event=ifelse(clinical$event=='Alive',0,1)   #死亡为1，生存为0
clinical$stage=str_split(clinical$stage,' ',simplify = T)[,2]
clinical$time=clinical$days/30
clinical$names=row.names(clinical)
exprSet$names=rownames(exprSet)
phe_1=inner_join(exprSet,clinical)#合并后的矩阵
rownames(phe_1)=phe_1$names
phe_1=phe_1[,-(ncol(phe_1)-(ncol(clinical))+1)]#去掉names那一列
write.csv(phe_1,'merge_clinical.csv')
phe_1=read.csv('merge_clinical.csv',row.names = 1,check.names = FALSE)
phe_1=phe_1[!phe_1$time ==0,]
#单因素cox
GO_cox=function(x){
FML=as.formula(paste0('Surv(time,event)~phe_1$\'',x,'\''))
#   FML=as.formula(paste0('Surv(time,event)~',x))
m=coxph(FML,data = phe_1)
sumcox=summary(m)
HR=round(exp(coef(m)),2)
PValue=round(sumcox$coefficients[,5],4)
CI=paste0(round(sumcox$conf.int[,3:4],2),collapse = '-')
CI_MIN=round(sumcox$conf.int[,3],2)
CI_MAX=round(sumcox$conf.int[,4],2)
coxresult=data.frame('Characteristics'= x,
'Hazaed Ratio'= HR,
'CI95'=CI,
'P.value'=PValue,
'CI_MIN'= CI_MIN,
'CI_MMAX'= CI_MAX,check.names = FALSE)
}
phe2=colnames(phe_1[,1:(ncol(exprSet)-1)])
ss=lapply(phe2,GO_cox)
ss=ldply(ss)#COX结果
coxresult=ss[(ss$P.value)<=0.05,]
dim(coxresult)
coxresult=coxresult[!coxresult$CI_MIN==1,]
coxresult=coxresult[!coxresult$CI_MMAX==1,]
####randomSurvivalForest
library(ggRandomForests)
library(randomForestSRC)
library(randomForest)
library(pROC)
rsf_data=read.csv('rsf_data.csv',row.names = 1)
v.out=rfsrc(Surv(time,event)~.,data =rsf_data ,ntree = 1000,forest = TRUE,importance = TRUE,proximity = TRUE,seed = 123)
print(v.out)
plot(v.out)
#################################
importance_otu <- v.out$importance
importance_otu <- importance_otu [order(importance_otu,decreasing = FALSE)]
importance_otu=as.data.frame(importance_otu)
importance_otu$gene=rownames(importance_otu)
importance_otu$color=ifelse(importance_otu$importance_otu >=0,"#ee3f4d","#2983bb")
#importance_otu$gene=factor(importance_otu$gene,levels = importance_otu$gene)
ggplot(importance_otu, aes(x=gene, y=importance_otu)) +
geom_segment( aes(x=gene, xend=gene, y=0, yend=importance_otu), color="grey") +
geom_point( color=importance_otu$color, size=1.8) +
theme_bw() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_text(angle = 60,size =8,face = "bold"),
)+
xlab("") +
ylab("Variable Importance")
vh.out_2=var.select(v.out)
gg_md <- gg_minimal_depth(vh.out_2, lbls = st.labs)
plot(gg_minimal_vimp(gg_md), ) +
theme(legend.position=c(0.8, 0.2))+
theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),axis.line = element_line(colour = "black"))
randomForest_gene=intersect(vh.out_2$topvars,rownames(importance_otu[importance_otu$importance_otu > 0,]))
#多因素cox
phe_3=cbind(phe_1[,c("TRAV9-2","KLHDC7B",'CHGA')],phe_1$time,phe_1$event)
m=coxph(Surv(phe_3$`phe_1$time`,phe_3$`phe_1$event`)~.,data = phe_3)
sumcox=summary(m)
b=as.data.frame(sumcox$coefficients)
b[b$`Pr(>|z|)` < 0.05,]
##############################
#forest gram
m=summary(m)
#p值改一下格式，加上显著性
p = ifelse(
m$coefficients[, 5] < 0.001,
"<0.001 ***",
ifelse(
m$coefficients[, 5] < 0.01,
"<0.01  **",
ifelse(
m$coefficients[, 5] < 0.05,
paste(round(m$coefficients[, 5], 3), " *"),
round(m$coefficients[, 5], 3)
)
)
)
#HR和它的置信区间
dat2 = as.data.frame(round(m$conf.int[, c(1, 3, 4)], 2))
dat2 = tibble::rownames_to_column(dat2, var = "Trait")
colnames(dat2)[2:4] = c("HR", "lower", "upper")
#需要在图上显示的HR文字和p值
dat2$HR2 = paste0(dat2[, 2], "(", dat2[, 3], "-", dat2[, 4], ")")
dat2$p = p
ins = function(x) {
c(x, rep(NA, ncol(dat2) - 1))
}
dat2 = rbind(
c(NA, NA, NA, NA, NA,NA),
dat2[1, ],
dat2[2:nrow(dat2), ]
)
for(i in 2:4) {
dat2[, i] = as.numeric(dat2[, i])
}
str(dat2)
aaa=dat2[,1]
bbb=c(NA     ,   "TRAV9-2", "KLHDC7B"  , "CHGA" )
dat2[,1]=bbb
forestplot(
dat2[, c(1, 5, 6)],
mean = dat2[, 2],
lower = dat2[, 3],
upper = dat2[, 4],
zero = 1,
boxsize = 0.2,
col = fpColors(box = '#1075BB', lines = 'black', zero = 'grey'),
lty.ci = "solid",
graph.pos = 2,
xticks = F,
is.summary = c(F, F, F),
align = "l",
hrzl_lines = list(
"2" = gpar(lty=1)),
colgap = unit(5, 'mm')
)
#k-m
#训练集
Surphe_1=phe_1
Surphe_1$riskscore=
Surphe_1$KLHDC7B       *   -0.3619641  +
Surphe_1$CHGA  *   0.1964393
Surphe_1$riskscore_group=ifelse(Surphe_1$riskscore>quantile(Surphe_1$riskscore,0.5),'high','low')
sfit <- survfit(Surv(time, event)~riskscore_group, data=Surphe_1)
ggsurvplot(sfit,palette = c("#ee3f4d","#2983bb"),
risk.table =TRUE,pval =TRUE,
conf.int =TRUE,xlab ="Time in months",
ggtheme =theme_light(),
ncensor.plot = TRUE)
##counts & TPM download
rm(list = ls())
library(tidyverse) # 数据清洗与读取的利器
library(stringr)
library(dplyr)
library(limma)
library(clusterProfiler)
library(DOSE)
library(org.Hs.eg.db)
library(tidyverse)
library(stringr)
library(dplyr)
counts=read.csv('counts.csv',row.names = 1,check.names = FALSE)
counts$gene_id=substr(counts$gene_id,1,15)
output=bitr(counts$gene_id,fromType = 'ENSEMBL',toType = 'SYMBOL',OrgDb = org.Hs.eg.db,drop = FALSE)
output$gene_id=output$ENSEMBL
counts_all <- counts %>%
inner_join(output,by="gene_id")
counts_all$gene_id=counts_all$SYMBOL
counts=counts_all[,-c(ncol(counts_all)-1,ncol(counts_all))]
eliminate_duplicated_lines=function(x){
counts_df=x
counts_df$median=apply(counts_df[,-1],1,median)
counts_df=counts_df[order(counts_df$gene_id,counts_df$median,decreasing = T),]
counts_df=counts_df[!duplicated(counts_df$gene_id),]
counts_df=counts_df[,-c(ncol(counts_df))]
counts_df=subset(counts_df,gene_id!= 'NA')
x=counts_df
}
##TPM转化
gene_length<- read.table('All_hg19gene_len.txt',header = TRUE)
counts=eliminate_duplicated_lines(counts)
colnames(gene_length)=c('gene_id','Length')
merge<-inner_join(counts,gene_length,by="gene_id")#根据基因那列进行合并
merge <- as.data.frame(na.omit(merge))#删除错误值行
rownames(merge)=merge$gene_id
mycounts=merge[,-1]  #删除GENE列
#TPM计算
mycounts$Length=as.numeric(mycounts$Length)
kb <-( mycounts$Length) / 1000
countdata <- mycounts[,1:(ncol(mycounts)-1)]
rpk <- countdata / kb
tpm <- t(t(rpk)/colSums(rpk) * 1000000)
log_counts_tpm=log2(tpm+1)
normalized_log_counts_tpm=as.data.frame(normalizeBetweenArrays(log_counts_tpm))
rownames(normalized_log_counts_tpm)=rownames(log_counts_tpm)
sample=rownames(read.csv('stageIII_IV_sample_name.csv',row.names = 1,header = FALSE))
normalized_log_counts_tpm=normalized_log_counts_tpm[,substr(colnames(normalized_log_counts_tpm),1,12) %in% sample]
normalized_log_counts_tpm=normalized_log_counts_tpm[,-which(duplicated(substr(colnames(normalized_log_counts_tpm),1,12)))]
